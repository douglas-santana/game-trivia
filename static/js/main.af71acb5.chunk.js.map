{"version":3,"sources":["trivia.png","services/API.js","pages/Login.js","actions/index.js","pages/Config.js","components/Header.js","components/Timer.js","components/Questions.js","pages/Game.js","pages/Ranking.js","pages/Feedback.js","reducers/reducerToken.js","reducers/questionReducer.js","reducers/index.js","store/index.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","getToken","fetch","then","res","json","data","token","localStorage","results","getStorage","JSON","parse","state","Login","name","email","buttonDisabled","handleChangeLogin","bind","submitLogin","this","nameLen","length","test","setState","target","value","validateLogin","actionBtn","props","hash","md5","toString","stringify","player","gravatarEmail","score","assertions","className","src","logo","alt","htmlFor","data-testid","type","onChange","to","disabled","onClick","handleClick","Component","connect","dispatch","a","async","callGetToken","payload","Config","Header","Timer","seconds","updateTimer","interval","setInterval","restart","prevProps","prevState","scoreValue","stopTimer","stop","Questions","array","next","index","isValid","isToggleOn","randAnswers","listenerChange","sumScore","changeState","nextQuestion","correct","incorrect","incorrectAnsers","random","Math","floor","swap","splice","difficulty","answer","timer","calcScore","prev","result","assert","setItem","category","question","correct_answer","incorrect_answers","map","idx","checkColor","dataTestId","style","border","key","Game","questions","loading","setScoreValue","val","questionReducer","Ranking","Feedback","INITIAL_STATE","reducerToken","action","error","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af71acb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","const URL = 'https://opentdb.com/api_token.php?command=request';\n\nexport const getToken = () => fetch(URL)\n  .then((res) => res.json())\n  .then((data) => {\n    const { token } = data;\n    localStorage.token = token;\n    return token;\n  })\n  .then((token) => fetch(`https://opentdb.com/api.php?amount=5&token=${token}`))\n  .then((res) => res.json())\n  .then(({ results }) => results);\n\nexport const getStorage = () => JSON.parse(localStorage.state);\n// export const getRanking = () => JSON.parse(localStorage.ranking);\n\n// export default getToken;\n","import React, { Component } from 'react';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { thunkToken } from '../actions';\nimport logo from '../trivia.png';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n      buttonDisabled: true,\n    };\n\n    this.handleChangeLogin = this.handleChangeLogin.bind(this);\n    this.submitLogin = this.submitLogin.bind(this);\n  }\n\n  validateLogin() {\n    const { name, email } = this.state;\n    const ln = 3;\n    const nameLen = name.length;\n    const reg = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\n    if (reg.test(email) && nameLen >= ln) {\n      this.setState({\n        buttonDisabled: false,\n      });\n    } else {\n      this.setState({\n        buttonDisabled: true,\n      });\n    }\n  }\n\n  handleChangeLogin({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n\n    }, () => this.validateLogin());\n  }\n\n  handleClick() {\n    const { actionBtn } = this.props;\n    actionBtn();\n  }\n\n  submitLogin() {\n    const { name, email } = this.state;\n    const hash = md5(email).toString();\n    localStorage.state = JSON.stringify({\n      player: {\n        name,\n        gravatarEmail: `https://www.gravatar.com/avatar/${hash}`,\n        score: 0,\n        assertions: 0,\n      },\n    });\n  }\n\n  render() {\n    const { buttonDisabled } = this.state;\n    return (\n      <header className=\"App-header\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        <form>\n          <label htmlFor=\"inputName\">\n            Nome\n            <input\n              data-testid=\"input-player-name\"\n              name=\"name\"\n              type=\"text\"\n              // value={ nome }\n              onChange={ this.handleChangeLogin }\n            />\n          </label>\n          <label htmlFor=\"inputEmail\">\n            E-mail\n            <input\n              data-testid=\"input-gravatar-email\"\n              name=\"email\"\n              type=\"email\"\n              // value={ email }\n              onChange={ this.handleChangeLogin }\n            />\n          </label>\n          <Link to=\"jogo\">\n            <button\n              data-testid=\"btn-play\"\n              type=\"button\"\n              disabled={ buttonDisabled }\n              onClick={ () => { this.handleClick(); this.submitLogin(); } }\n            >\n              Jogar\n            </button>\n          </Link>\n          <Link to=\"/settings\" data-testid=\"btn-settings\">\n            <button type=\"button\">\n              Setings\n            </button>\n          </Link>\n        </form>\n      </header>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  actionBtn: () => dispatch(thunkToken()),\n});\n\nLogin.propTypes = {\n  actionBtn: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import { getToken } from '../services/API';\n\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\nexport const SUCESS = 'SUCESS';\nexport const FAIL = 'SUCESS';\nexport const REQUEST_QUESTIONS_SUCCESS = 'REQUEST_QUESTIONS_SUCCESS';\nexport const REQUEST_QUESTIONS_FAILED = 'REQUEST_QUESTIONS_FAILED';\n\n/* export const loading = (payload) => ({\n  type: LOADING,\n  payload,\n}); */\n\nexport const success = (payload) => ({\n  type: SUCESS,\n  payload,\n});\n\n/* export const fail = (payload) => ({\n  type: FAIL,\n  payload,\n});\n */\nexport const thunkToken = () => async (dispatch) => {\n  const callGetToken = await getToken();\n  dispatch(success(callGetToken));\n};\n// ============================================================\n\nexport const requestQuestionsSuccess = (payload) => ({\n  type: REQUEST_QUESTIONS_SUCCESS,\n  payload,\n});\n\nexport const requestQuestionsFailed = (payload) => ({\n  type: REQUEST_QUESTIONS_FAILED,\n  payload,\n});\n\nexport const fetchQuestions = (token) => async (dispatch) => {\n  const getFetch = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`).json();\n  dispatch(requestQuestionsSuccess(getFetch));\n};\n","import React, { Component } from 'react';\n\nclass Config extends Component {\n  render() {\n    return (\n      <div>\n        <h2 data-testid=\"settings-title\">Setings</h2>\n      </div>\n    );\n  }\n}\n\nexport default Config;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends Component {\n  render() {\n    const getStorage = () => JSON.parse(localStorage.state);\n    const { player: { gravatarEmail, name } } = getStorage();\n    const { score } = this.props;\n    return (\n      <div>\n        <header>\n          <h1>JOGO</h1>\n          <img\n            src={ gravatarEmail }\n            data-testid=\"header-profile-picture\"\n            alt={ name }\n          />\n          <span\n            data-testid=\"header-player-name\"\n          >\n            { name }\n          </span>\n          <span\n            data-testid=\"header-score\"\n          >\n            { score }\n          </span>\n        </header>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  score: PropTypes.number.isRequired,\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Timer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      seconds: 30,\n    };\n    this.updateTimer = this.updateTimer.bind(this);\n  }\n\n  componentDidMount() {\n    const SECOND = 1000;\n    this.interval = setInterval(() => {\n      const { restart } = this.props;\n      if (restart) {\n        this.setState((state) => ({\n          seconds: state.seconds - 1,\n        }));\n      }\n    },\n    SECOND);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { scoreValue, stopTimer, stop } = this.props;\n    if (prevState.seconds === 1) {\n      scoreValue();\n      this.updateTimer();\n    }\n    if (!prevProps.stop && stop) {\n      this.updateTimer();\n      stopTimer(prevState.seconds);\n    }\n  }\n\n  updateTimer() {\n    const SECOND = 30;\n    this.setState({\n      seconds: SECOND,\n    });\n  }\n\n  render() {\n    const { seconds } = this.state;\n    return (\n      <div>\n        <p>{ seconds }</p>\n      </div>\n    );\n  }\n}\n\nTimer.propTypes = {\n  scoreValue: PropTypes.func.isRequired,\n  stopTimer: PropTypes.func.isRequired,\n  stop: PropTypes.bool.isRequired,\n  restart: PropTypes.bool.isRequired,\n};\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport Timer from './Timer';\nimport { getStorage } from '../services/API';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: props,\n      next: false,\n      index: 0,\n      isValid: false,\n      value: false,\n      restart: true,\n      isToggleOn: false };\n\n    this.randAnswers = this.randAnswers.bind(this);\n    this.listenerChange = this.listenerChange.bind(this);\n    this.sumScore = this.sumScore.bind(this);\n    this.changeState = this.changeState.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  randAnswers(correct, incorrect) {\n    const incorrectAnsers = [...incorrect];\n    const random = Math.floor(Math.random() * ((incorrectAnsers.length - 1) + 1));\n    const swap = incorrectAnsers[random];\n    incorrectAnsers.splice(random, 0);\n    incorrectAnsers[random] = correct;\n    return [...incorrectAnsers, swap];\n  }\n\n  listenerChange() {\n    this.setState({ isValid: true, isToggleOn: true });\n  }\n\n  changeState(state) {\n    this.setState({ value: false });\n    const { difficulty, answer } = this.state;\n    const timer = state;\n    const result = 0;\n    this.calcScore(result, timer, difficulty, answer);\n  }\n\n  nextQuestion() {\n    const { index } = this.state;\n    const prev = index;\n    this.setState({ index: prev + 1,\n      next: false,\n      isValid: false,\n      isToggleOn: false,\n      restart: true });\n  }\n\n  calcScore(result, timer, difficulty, answer) {\n    const exactAnswer = 10;\n    const magicNumber3 = 3;\n    const { player: { gravatarEmail, name,\n      score: prev, assertions } } = getStorage();\n    let assert = assertions;\n    if (answer['data-testid'] === 'correct-answer') {\n      if (difficulty === 'easy') {\n        result = exactAnswer + (timer * 1) + prev;\n      } else if (difficulty === 'medium') {\n        result = exactAnswer + (timer * 2) + prev;\n      } else if (difficulty === 'hard') {\n        result = exactAnswer + (timer * magicNumber3) + prev;\n      }\n      assert += 1;\n    } else {\n      result = prev;\n    }\n    const { scoreValue } = this.props;\n    scoreValue(result);\n    localStorage.setItem('state', JSON.stringify({\n      player: {\n        name,\n        assertions: assert,\n        score: result,\n        gravatarEmail },\n    }));\n  }\n\n  sumScore(answer, difficulty) {\n    this.setState((prevState) => ({\n      isToggleOn: !prevState.isToggleOn,\n    }));\n\n    this.setState({ value: true, next: true, difficulty, answer, restart: false });\n  }\n\n  render() {\n    const { array, index, next, restart,\n      isValid, value, isToggleOn } = this.state;\n    const limit = 5;\n    if (index === limit) return <Redirect to=\"/feedback\" />;\n    return (\n      <div>\n        <h3 data-testid=\"question-category\">{array[index].category}</h3>\n        <h3 data-testid=\"question-text\">{array[index].question}</h3>\n        {this.randAnswers(array[index].correct_answer,\n          array[index].incorrect_answers).map((answer, idx) => {\n          const checkColor = answer === array[index].correct_answer\n            ? '3px solid rgb(6, 240, 15)'\n            : '3px solid rgb(255, 0, 0)';\n          const test = answer === array[index].correct_answer\n            ? 'correct-answer' : `wrong-answer-${idx}`;\n          const dataTestId = { 'data-testid': test };\n          return (\n            <button\n              style={ { border: `${next ? checkColor : ''}` } }\n              key={ answer }\n              type=\"button\"\n              { ...dataTestId }\n              disabled={ isValid }\n              onClick={ () => this.sumScore(dataTestId, array[index].difficulty) }\n            >\n              {answer}\n            </button>\n          );\n        })}\n        <Timer\n          scoreValue={ this.listenerChange }\n          stopTimer={ this.changeState }\n          stop={ value }\n          restart={ restart }\n        />\n        { isToggleOn ? (\n          <button\n            type=\"button\"\n            data-testid=\"btn-next\"\n            onClick={ this.nextQuestion }\n          >\n            Next\n          </button>) : null }\n      </div>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n}.isRequired;\n\nexport default Questions;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Questions from '../components/Questions';\nimport { getToken } from '../services/API';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      loading: true,\n      value: 0,\n    };\n\n    this.setScoreValue = this.setScoreValue.bind(this);\n  }\n\n  componentDidMount() {\n    getToken().then((questions) => {\n      this.setState({ questions, loading: false });\n    });\n  }\n\n  setScoreValue(val) {\n    this.setState({ value: val });\n  }\n\n  render() {\n    const { questions, loading, value } = this.state;\n    return (\n      <div className=\"game-container\">\n        <Header score={ value } />\n        {questions.length === 0 ? loading\n          : <Questions { ...questions } scoreValue={ this.setScoreValue } /> }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.questionReducer.questions,\n});\n\nexport default connect(mapStateToProps, null)(Game);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Ranking extends Component {\n  render() {\n    return (\n      <>\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        <Link to=\"/\">\n          <button type=\"button\" data-testid=\"btn-go-home\">\n            Voltar para o início\n          </button>\n        </Link>\n      </>\n    );\n  }\n}\n\nexport default Ranking;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport { getStorage } from '../services/API';\n\nclass Feedback extends Component {\n  render() {\n    const { player: { score, assertions } } = getStorage();\n    const assert = 3;\n    return (\n      <div>\n        <Header score={ score } />\n        <p data-testid=\"feedback-total-score\">{ score }</p>\n        <p data-testid=\"feedback-total-question\">{ assertions }</p>\n        <p data-testid=\"feedback-text\">\n          {assertions >= assert\n            ? 'Mandou bem!' : 'Podia ser melhor...'}\n        </p>\n        <Link to=\"/\">\n          <button type=\"button\" data-testid=\"btn-play-again\">\n            Jogar novamente\n          </button>\n        </Link>\n        <Link to=\"/ranking\">\n          <button type=\"button\" data-testid=\"btn-ranking\">\n            Ver Ranking\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\nexport default Feedback;\n","import { SUCESS } from '../actions';\n\nconst INITIAL_STATE = {\n  token: '',\n};\n\nconst reducerToken = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SUCESS:\n    return { ...state, token: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default reducerToken;\n","import {\n  REQUEST_QUESTIONS_SUCCESS,\n  REQUEST_QUESTIONS_FAILED,\n} from '../actions/index';\n\nconst INITIAL_STATE = {\n  questions: [],\n};\n\nfunction questionReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case REQUEST_QUESTIONS_SUCCESS:\n    return {\n      ...state,\n      questions: action.payload,\n    };\n  case REQUEST_QUESTIONS_FAILED:\n    return {\n      ...state,\n      error: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default questionReducer;\n","import { combineReducers } from 'redux';\nimport reducerToken from './reducerToken';\nimport questionReducer from './questionReducer';\n\nconst rootReducer = combineReducers({ reducerToken, questionReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Config from './pages/Config';\nimport Game from './pages/Game';\nimport Ranking from './pages/Ranking';\nimport './App.css';\nimport Feedback from './pages/Feedback';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/game-trivia\" component={ Login } />\n      <Route path=\"/settings\" component={ Config } />\n      <Route path=\"/jogo\" component={ Game } />\n      <Route path=\"/ranking\" component={ Ranking } />\n      <Route path=\"/feedback\" component={ Feedback } />\n    </Switch>\n  );\n}\n"],"sourceRoot":""}